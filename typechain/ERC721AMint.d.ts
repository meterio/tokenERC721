/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC721AMintInterface extends ethers.utils.Interface {
  functions: {
    "accountMinted(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "cost()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "maxMintPerAccount()": FunctionFragment;
    "maxMintPerTx()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "root()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "saleActive()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setCost(uint256)": FunctionFragment;
    "setMaxMintPerAccount(uint256)": FunctionFragment;
    "setMaxMintPerTx(uint256)": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "setRoot(bytes32)": FunctionFragment;
    "setSaleActive(bool)": FunctionFragment;
    "setWlCost(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "wlClaimed(address)": FunctionFragment;
    "wlMint(bytes32[],uint256)": FunctionFragment;
    "wlcost()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountMinted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "cost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMintPerAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMintPerTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRoot", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setSaleActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWlCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "wlClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "wlMint",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wlcost", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMintPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMintPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWlCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wlClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wlMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wlcost", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ERC721AMint extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC721AMintInterface;

  functions: {
    accountMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accountMinted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    baseURI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baseURI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    cost(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "cost()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    maxMintPerAccount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxMintPerAccount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxMintPerTx(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxMintPerTx()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "root()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    saleActive(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "saleActive()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCost(
      _cost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCost(uint256)"(
      _cost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxMintPerAccount(
      _maxMintPerAccount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxMintPerAccount(uint256)"(
      _maxMintPerAccount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxMintPerTx(
      _maxMintPerTx: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxMintPerTx(uint256)"(
      _maxMintPerTx: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxSupply(uint256)"(
      _maxSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoot(
      _root: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoot(bytes32)"(
      _root: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSaleActive(
      _saleActive: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSaleActive(bool)"(
      _saleActive: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWlCost(
      _wlcost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWlCost(uint256)"(
      _wlcost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    wlClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "wlClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    wlMint(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "wlMint(bytes32[],uint256)"(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    wlcost(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "wlcost()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  accountMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "accountMinted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  cost(overrides?: CallOverrides): Promise<BigNumber>;

  "cost()"(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxMintPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMintPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxMintPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMintPerTx()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  "root()"(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  saleActive(overrides?: CallOverrides): Promise<boolean>;

  "saleActive()"(overrides?: CallOverrides): Promise<boolean>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    baseURI_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCost(
    _cost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCost(uint256)"(
    _cost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxMintPerAccount(
    _maxMintPerAccount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxMintPerAccount(uint256)"(
    _maxMintPerAccount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxMintPerTx(
    _maxMintPerTx: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxMintPerTx(uint256)"(
    _maxMintPerTx: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxSupply(
    _maxSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxSupply(uint256)"(
    _maxSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoot(
    _root: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoot(bytes32)"(
    _root: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSaleActive(
    _saleActive: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSaleActive(bool)"(
    _saleActive: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWlCost(
    _wlcost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWlCost(uint256)"(
    _wlcost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  wlClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "wlClaimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wlMint(
    proof: BytesLike[],
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "wlMint(bytes32[],uint256)"(
    proof: BytesLike[],
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  wlcost(overrides?: CallOverrides): Promise<BigNumber>;

  "wlcost()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accountMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "accountMinted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    cost(overrides?: CallOverrides): Promise<BigNumber>;

    "cost()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxMintPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintPerTx()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(quantity: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mint(uint256)"(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    root(overrides?: CallOverrides): Promise<string>;

    "root()"(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    saleActive(overrides?: CallOverrides): Promise<boolean>;

    "saleActive()"(overrides?: CallOverrides): Promise<boolean>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCost(_cost: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCost(uint256)"(
      _cost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMintPerAccount(
      _maxMintPerAccount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxMintPerAccount(uint256)"(
      _maxMintPerAccount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMintPerTx(
      _maxMintPerTx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxMintPerTx(uint256)"(
      _maxMintPerTx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxSupply(uint256)"(
      _maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoot(_root: BytesLike, overrides?: CallOverrides): Promise<void>;

    "setRoot(bytes32)"(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleActive(
      _saleActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSaleActive(bool)"(
      _saleActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWlCost(_wlcost: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setWlCost(uint256)"(
      _wlcost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    wlClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "wlClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wlMint(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wlMint(bytes32[],uint256)"(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wlcost(overrides?: CallOverrides): Promise<BigNumber>;

    "wlcost()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    accountMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "accountMinted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    cost(overrides?: CallOverrides): Promise<BigNumber>;

    "cost()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMintPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintPerTx()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    "root()"(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    saleActive(overrides?: CallOverrides): Promise<BigNumber>;

    "saleActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBaseURI(baseURI_: string, overrides?: Overrides): Promise<BigNumber>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCost(_cost: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setCost(uint256)"(
      _cost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxMintPerAccount(
      _maxMintPerAccount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxMintPerAccount(uint256)"(
      _maxMintPerAccount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxMintPerTx(
      _maxMintPerTx: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxMintPerTx(uint256)"(
      _maxMintPerTx: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxSupply(uint256)"(
      _maxSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoot(_root: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "setRoot(bytes32)"(
      _root: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSaleActive(
      _saleActive: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSaleActive(bool)"(
      _saleActive: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWlCost(_wlcost: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setWlCost(uint256)"(
      _wlcost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    wlClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wlClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wlMint(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "wlMint(bytes32[],uint256)"(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    wlcost(overrides?: CallOverrides): Promise<BigNumber>;

    "wlcost()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountMinted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cost()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMintPerAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxMintPerAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMintPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxMintPerTx()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "root()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    saleActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCost(
      _cost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCost(uint256)"(
      _cost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxMintPerAccount(
      _maxMintPerAccount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxMintPerAccount(uint256)"(
      _maxMintPerAccount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxMintPerTx(
      _maxMintPerTx: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxMintPerTx(uint256)"(
      _maxMintPerTx: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxSupply(uint256)"(
      _maxSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoot(
      _root: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoot(bytes32)"(
      _root: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSaleActive(
      _saleActive: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSaleActive(bool)"(
      _saleActive: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWlCost(
      _wlcost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWlCost(uint256)"(
      _wlcost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    wlClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wlClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wlMint(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "wlMint(bytes32[],uint256)"(
      proof: BytesLike[],
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    wlcost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wlcost()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
